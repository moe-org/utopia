// This file is a part of the project Utopia(Or is a part of its subproject).
// Copyright 2020-2023 mingmoe(http://kawayi.moe)
// The file was licensed under the AGPL 3.0-or-later license

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace Utopia.Analyzer;

public class GuuidItem
{
    [XmlElement]
    public string? Name = null;

    [XmlElement]
    public string Value = "No Guuid Definitation";

    [XmlElement]
    public string Desc = "No description";
}

[XmlRoot("Guuids")]
public class GuuidDeclarationRoot
{
    [XmlElement]
    public string Namespace = "Utopia";

    [XmlElement]
    public string Class = "GuuidDeclarations";

    [XmlArray("Items")]
    [XmlArrayItem("Item")]
    public GuuidItem[] Items = [];
}

[Generator]
public class GuuidGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    private void ExecuteFor(GeneratorExecutionContext context, GuuidDeclarationRoot root, string id)
    {
        StringBuilder builder = new();

        builder.Append(
            $@"
// This file was generated by the Utopia.Analyzer.GuuidGenerator
// from file: {id}

using Utopia.Core;
using System.CodeDom.Compiler;
namespace {root.Namespace};

[GeneratedCodeAttribute(""Utopia.Analyzer.GuuidGenerator"",null)]
public static partial class {root.Class}{{
");

        // add declarations
        foreach (var declaration in root.Items)
        {
            DiagnosticHelper.CheckGuuidFormat(declaration.Value, context);

            builder.AppendLine($"\t// {declaration.Desc}");
            builder.AppendLine(
                $"\tpublic static readonly Guuid {declaration.Name ?? $"No CSharpName Found at {declaration.Value}"} = " +
                $"Guuid.Parse(\"{declaration.Value}\");");
        }

        builder.AppendLine("}");

        string name = Path.GetFileName(id);

        context.AddSource($"{name}.g.cs", builder.ToString());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var files = context.AdditionalFiles.Where(f =>
                                                          Path.GetFullPath(f.Path)
                                                              .ToLowerInvariant()
                                                              .Trim()
                                                              .EndsWith(".guuid.xml")).ToArray();

        XmlSerializer serializer = new XmlSerializer(typeof(GuuidDeclarationRoot));

        foreach (var file in files)
        {
            var root = Utility.DeserializeXml<GuuidDeclarationRoot>(file, context);

            if (root is null)
            {
                continue;
            }

            ExecuteFor(context, root, file.Path);
        }
    }
}
