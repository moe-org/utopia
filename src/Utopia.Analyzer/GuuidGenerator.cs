// This file is a part of the project Utopia(Or is a part of its subproject).
// Copyright 2020-2023 mingmoe(http://kawayi.moe)
// The file was licensed under the AGPL 3.0-or-later license

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace Utopia.Analyzer;

[Generator]
public class GuuidGenerator : ISourceGenerator
{
    /// <summary>
    /// copied
    /// </summary>
    public const string Pattern = @"^[a-zA-Z]{1}[a-zA-Z0-9]*(\.[a-zA-Z]{1}[a-zA-Z0-9]*)+$";

    private Regex _regex = new Regex(Pattern);

    public void Initialize(GeneratorInitializationContext context)
    {

    }

    private void ExecuteFor(GeneratorExecutionContext context, GuuidDeclarationRoot root, string id)
    {
        StringBuilder builder = new();

        builder.Append(
            $@"
// This file was generated by the Utopia.Analyzer.GuuidGenerator
// from file: {id}

using Utopia.Core;
using System.CodeDom.Compiler;
namespace {root.Namespace};

[GeneratedCodeAttribute(""Utopia.Analyzer.GuuidGenerator"",null)]
public static partial class {root.Class}{{
");

        foreach (var declaration in root.Items)
        {
            // test guuid
            if (!_regex.IsMatch(declaration.Guuid))
            {
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                                                               "UTOPIA02",
                                                               "The guuid format is illegal",
                                                               "The guuid format is illegal:{0}",
                                                               "Utopia Guuid Generate",
                                                               DiagnosticSeverity.Error,
                                                               true),
                                                           null, declaration.Guuid));
            }

            builder.AppendLine($"\t// {declaration.Description}");
            builder.AppendLine(
                $"\tpublic static Guuid {declaration.CSharpName ?? $"No CSharpName Found at {declaration.Guuid}!!!"} = " +
                $"Guuid.Parse(\"{declaration.Guuid}\");");
        }

        builder.Append("}");

        var sha256 = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(id));

        string name = "";

        foreach (var b in sha256)
        {
            name += b.ToString("x2");
        }

        context.AddSource($"{name}.g.cs", builder.ToString());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var files = context.AdditionalFiles.TakeWhile(f => Path.GetFullPath(f.Path).EndsWith(".guuid.xml")).ToArray();

        XmlSerializer serializer = new XmlSerializer(typeof(GuuidDeclarationRoot));

        foreach (var file in files)
        {
            var text = file.GetText();

            if (text == null)
            {
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                                                               "UTOPIA00",
                                                               "can not read file",
                                                               "AdditionalText.GetText() returns null at file:{0}",
                                                               "Utopia Guuid Generate",
                                                               DiagnosticSeverity.Error,
                                                               true),
                                             null, file.Path));
                continue;
            }

            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(text.ToString()));

            var root = (GuuidDeclarationRoot)serializer.Deserialize(stream);

            if (root is null)
            {
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                                                               "UTOPIA01",
                                                               "Deserialize returns null",
                                                               "Deserialize() returns null at file:{0}",
                                                               "Utopia Guuid Generate",
                                                               DiagnosticSeverity.Error,
                                                               true),
                                             null, file.Path));
                continue;
            }

            ExecuteFor(context,root,file.Path);
        }
    }
}
