// This file is a part of the project Utopia(Or is a part of its subproject).
// Copyright 2020-2023 mingmoe(http://kawayi.moe)
// The file was licensed under the AGPL 3.0-or-later license

using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace Utopia.Analyzer;

public class Dependency
{
    [XmlElement] public string Id = string.Empty;

    [XmlElement] public string Range = string.Empty;
}

/// <summary>
/// 插件信息
/// </summary>
[XmlRoot("Plugin")]
public class PluginInformation
{
    [XmlElement] public string Namespace = string.Empty;
    [XmlElement] public string Class = "Plugin";
    [XmlElement] public string Name = string.Empty;
    [XmlElement] public string Description = string.Empty;
    [XmlElement] public string Id = string.Empty;
    [XmlElement] public string Homepage = string.Empty;
    [XmlElement] public string License = string.Empty;
    [XmlElement] public string Author = string.Empty;
    [XmlElement] public string Version = string.Empty;

    [XmlArray("Deps")]
    [XmlArrayItem("Dep")]
    public Dependency[] Dependencies = [];
}

/// <summary>
/// 插件信息生成
/// </summary>
[Generator]
public class PluginInformationGenerator : ISourceGenerator
{

    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var files = context.AdditionalFiles.Where(f =>
            Path.GetFullPath(f.Path)
                .ToLowerInvariant()
                .Trim()
                .EndsWith(".plugin.xml")).ToImmutableArray();

        switch (files.Length)
        {
            case >= 2:
                context.ReportDiagnostic(DiagnosticHelper.TooManyPluginInformationFile());
                return;
            case 0:
                context.ReportDiagnostic(DiagnosticHelper.NoPluginInformationFile());
                return;
        }

        // generate
        var file = files[0];

        var info = Utility.DeserializeXml<PluginInformation>(file, context);

        if (info is null)
        {
            return;
        }

        StringBuilder builder = new();

        AddQuote(ref info.Id);
        AddQuote(ref info.Name);
        AddQuote(ref info.Description);
        AddQuote(ref info.Author);
        AddQuote(ref info.Homepage);
        AddQuote(ref info.License);
        AddQuote(ref info.Version);

        builder.AppendLine($@"
// This file was generated by the Utopia.Analyzer.PluginInformationGenerator
// from file: {file.Path}

using Utopia.Core;
using System.CodeDom.Compiler;
using Range = SemanticVersioning.Range;
using Version = SemanticVersioning.Version;
namespace {info.Namespace};

partial class {info.Class} : Utopia.Core.Plugin.IPluginInformation {{
    public Guuid Id => Guuid.Parse({info.Id});
    public string Name => {info.Name};
    public string Description => {info.Description};
    public string License => {info.License};
    public string Homepage => {info.Homepage};
    public string Author => {info.Author};
    public Version Version => Version.Parse({info.Version});
    public IEnumerable<(Guuid, Range)> Dependencies => _dependencies;
    private readonly (Guuid, Range)[] _dependencies = [");

        // add dependencies
        foreach (var dependency in info.Dependencies)
        {
            AddQuote(ref dependency.Id);
            AddQuote(ref dependency.Range);
            builder.AppendLine($"        new(Guuid.Parse({dependency.Id}),Range.Parse({dependency.Range})),");
        }

        builder.AppendLine("    ];\n}");

        context.AddSource($"{Path.GetFileName(file.Path)}.g.cs", builder.ToString());

        return;

        static void AddQuote(ref string str)
        {
            str = $"\"{str}\"";
        }
    }
}
